{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InitMsg",
  "description": "The InitMsg is used once in the smart contract lifecycle. When the instantiate execution route is invoked, this message is expected as input.  Clearly defining all requirements for the initial state of the smart contract is key to a well-made and useful contract.",
  "type": "object",
  "required": [
    "contract_base_name"
  ],
  "properties": {
    "contract_base_name": {
      "description": "This value will be used to bind a name to the smart contract, using Provenance's name module.  This is assisted by the provwasm library.",
      "type": "string"
    },
    "increment_counter_fee": {
      "anyOf": [
        {
          "$ref": "#/definitions/FeeCollectionDetail"
        },
        {
          "type": "null"
        }
      ]
    },
    "starting_counter": {
      "description": "This value will be the initial counter value, which will be used to display some functionality in simple routes. Note that it is wrapped in an Option, which makes it an optional input parameter during instantiation.  If left blank, the initial value will be zero.",
      "type": [
        "integer",
        "null"
      ],
      "format": "uint128",
      "minimum": 0.0
    }
  },
  "definitions": {
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "FeeCollectionDetail": {
      "type": "object",
      "required": [
        "fee_collection_amount",
        "fee_collector_address"
      ],
      "properties": {
        "fee_collection_amount": {
          "$ref": "#/definitions/Coin"
        },
        "fee_collector_address": {
          "type": "string"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
