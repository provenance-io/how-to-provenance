{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "description": "Constructs a new instance of the smart contract.",
  "type": "object",
  "required": [
    "bind_name",
    "contract_name"
  ],
  "properties": {
    "ask_fee": {
      "description": "An amount to be charged to the sender when an ask is created.  This uses the Provenance Blockchain Fee Module, which will take 50% of the fees sent and redistribute them to various external entities.  The other 50% will be retained and sent to the contract's admin account.",
      "anyOf": [
        {
          "$ref": "#/definitions/Uint128"
        },
        {
          "type": "null"
        }
      ]
    },
    "bid_fee": {
      "description": "An amount to be charged to the sender when a bid is created.  This uses the Provenance Blockchain Fee Module, which will take 50% of the fees sent and redistribute them to various external entities.  The other 50% will be retained and sent to the contract's admin account.",
      "anyOf": [
        {
          "$ref": "#/definitions/Uint128"
        },
        {
          "type": "null"
        }
      ]
    },
    "bind_name": {
      "description": "A name that will be bound to the smart contract using the Provenance Blockchain Name Module. This name must be unrestricted, or a failure will occur.  Note: The Provenance Blockchain provides a parent name, \"sc.pb\" on both testnet and mainnet that is unrestricted, specifically for binding smart contracts on instantiation.",
      "type": "string"
    },
    "contract_name": {
      "description": "A free-form name for the smart contract, purely for description and display purposes.",
      "type": "string"
    }
  },
  "definitions": {
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
