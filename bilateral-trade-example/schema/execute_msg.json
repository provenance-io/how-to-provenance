{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "description": "Executes the smart contract, causing changes reflected in Provenance Blockchain transactions.",
  "anyOf": [
    {
      "description": "Removes an ask from the contract's storage and refunds the base (Provenance Blockchain Metadata Scope or Coin).  Ask creation fees are not refunded.",
      "type": "object",
      "required": [
        "cancel_ask"
      ],
      "properties": {
        "cancel_ask": {
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "description": "The unique identifier for the ask to cancel.  If no ask with this value exists in contract storage, an error will be returned.",
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Removes a bid from the contract's storage and refunds the quote funds provided.  Bid creation fees are not refunded.",
      "type": "object",
      "required": [
        "cancel_bid"
      ],
      "properties": {
        "cancel_bid": {
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "description": "The unique identifier for the bid to cancel.  If no bid with this value exists in contract storage, an error will be returned.",
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Creates a new AskOrder, holding the given base Coin or Provenance Blockchain Metadata Scope in the smart contract until a cancellation occurs or a match is made.",
      "type": "object",
      "required": [
        "create_ask"
      ],
      "properties": {
        "create_ask": {
          "type": "object",
          "required": [
            "id",
            "quote"
          ],
          "properties": {
            "id": {
              "description": "The unique identifier for the new ask to create.  If an ask already exists with the given id, an error will be returned.",
              "type": "string"
            },
            "quote": {
              "description": "The funds that a bidder must provide for a match to be successfully executed.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            },
            "scope_address": {
              "description": "The address of a scope to list for trade.  If this value is omitted, funds must be provided in the execute message transaction.",
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Creates a new BidOrder, holding the given quote Coin in the smart contract until a cancellation occurs or a match is made.",
      "type": "object",
      "required": [
        "create_bid"
      ],
      "properties": {
        "create_bid": {
          "type": "object",
          "required": [
            "base",
            "id"
          ],
          "properties": {
            "base": {
              "description": "Indicates the type of exchange that will be made: scope or coin.",
              "allOf": [
                {
                  "$ref": "#/definitions/BaseType"
                }
              ]
            },
            "effective_time": {
              "description": "An optional timestamp denoting when the bid was created.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                },
                {
                  "type": "null"
                }
              ]
            },
            "id": {
              "description": "The unique identifier for the new bid to create.  If a bid already exists with the given id, an error will be returned.",
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Changes the contract's fees to the specified values.  Only the contract's admin account can execute this route.",
      "type": "object",
      "required": [
        "update_fees"
      ],
      "properties": {
        "update_fees": {
          "type": "object",
          "properties": {
            "ask_fee": {
              "description": "The new value to charge the sender when asks are created.  If this value is omitted, the value in contract storage will be cleared.  Providing zero or a negative value will produce an error.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "bid_fee": {
              "description": "The new value to charge the sender when bids are created.  If this value is omitted, the value in contract storage will be cleared.  Providing zero or a negative value will produce an error.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Attempts to match an AskOrder with a BidOrder, performing an exchange of the asker's base with the bidder's quote.  This will only be successful if the bidder's base matches the asker's base, and the asker's quote matches the bidder's quote.",
      "type": "object",
      "required": [
        "execute_match"
      ],
      "properties": {
        "execute_match": {
          "type": "object",
          "required": [
            "ask_id",
            "bid_id"
          ],
          "properties": {
            "ask_id": {
              "description": "The unique identifier of the ask to attempt a match on.  If no ask exists within the contract storage with this id, an error will be returned.",
              "type": "string"
            },
            "bid_id": {
              "description": "The unique identifier of the bid to attempt a match on.  If no bid exists within the contract storage with this id, an error will be returned.",
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "BaseType": {
      "anyOf": [
        {
          "type": "object",
          "required": [
            "coin"
          ],
          "properties": {
            "coin": {
              "type": "object",
              "required": [
                "coins"
              ],
              "properties": {
                "coins": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Coin"
                  }
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "scope"
          ],
          "properties": {
            "scope": {
              "type": "object",
              "required": [
                "scope_address"
              ],
              "properties": {
                "scope_address": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
